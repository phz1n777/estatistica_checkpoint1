import streamlit as st
import pandas as pd
import numpy as np
import scipy.stats as stats
import plotly.express as px
import plotly.graph_objects as go
import plotly.figure_factory as ff
import seaborn as sns
import matplotlib.pyplot as plt
from plotnine import *

st.set_page_config(
    page_title="Dados",
    page_icon="üèÉüèº",
    layout="wide"
)

# Fun√ß√£o para exibir gr√°fico Plotly
def plot_distribution(x, y, title, xlabel, ylabel):
    fig = go.Figure(data=[go.Bar(x=x, y=y)])
    fig.update_layout(title=title, xaxis_title=xlabel, yaxis_title=ylabel)
    st.plotly_chart(fig)



st.header("An√°lise de Dados")
st.divider()
uploaded_file = "Placement_Data_Full_Class.xlsx"

st.title("An√°lise Estat√≠stica dos Dados de Contrata√ß√£o de Alunos")

# Se√ß√£o 1: Apresenta√ß√£o dos Dados
st.header("1. Apresenta√ß√£o dos Dados")

st.subheader("1.1 Descri√ß√£o do Conjunto de Dados")
st.write(
    "O conjunto de dados utilizado neste estudo cont√©m informa√ß√µes sobre alunos de uma institui√ß√£o de ensino "
    "e sua poss√≠vel contrata√ß√£o por empresas. As vari√°veis incluem caracter√≠sticas acad√™micas, como notas "
    "em diferentes etapas da educa√ß√£o, √°rea de estudo, especializa√ß√£o no MBA, e experi√™ncia de trabalho. "
    "O objetivo √© analisar quais fatores influenciam a contrata√ß√£o de um aluno e se h√° padr√µes que possam prever esse resultado."
)

st.subheader("1.2 Tipos de Vari√°veis")

st.write("**Vari√°veis Categ√≥ricas (Qualitativas):**")
st.markdown(
    "- `gender`: G√™nero do aluno (`M` para masculino, `F` para feminino).\n"
    "- `ssc_b`: Tipo de escola no ensino m√©dio (`Central`, `Others`).\n"
    "- `hsc_b`: Tipo de escola no ensino m√©dio superior.\n"
    "- `hsc_s`: √Årea de estudo no ensino m√©dio (`Science`, `Commerce`, `Arts`).\n"
    "- `degree_t`: Tipo de curso de gradua√ß√£o (`Sci&Tech`, `Comm&Mgmt`).\n"
    "- `workex`: Experi√™ncia de trabalho antes do MBA (`Yes`, `No`).\n"
    "- `specialisation`: Especializa√ß√£o no MBA (`Mkt&HR`, `Mkt&Fin`).\n"
    "- `status`: Se o aluno foi contratado (`Placed`) ou n√£o (`Not Placed`)."
)

st.write("**Vari√°veis Num√©ricas (Quantitativas):**")
st.markdown(
    "- `ssc_p`: Percentual de notas no ensino m√©dio.\n"
    "- `hsc_p`: Percentual de notas no ensino m√©dio superior.\n"
    "- `degree_p`: Percentual de notas no curso de gradua√ß√£o.\n"
    "- `etest_p`: Percentual do teste de empregabilidade.\n"
    "- `mba_p`: Percentual de notas no MBA.\n"
    "- `salary`: Sal√°rio oferecido ao aluno contratado."
)

if uploaded_file is not None:
    df = pd.read_excel(uploaded_file)
    st.write("Amostra dos dados:")
    st.write(df.head())
    
    st.subheader("1.3 Perguntas de An√°lise e Respostas")
    
    st.write("### 1. H√° uma rela√ß√£o entre as notas acad√™micas e a contrata√ß√£o?")
    st.write("O heatmap de correla√ß√£o mostra que as notas t√™m pouca correla√ß√£o com a contrata√ß√£o.")
    st.write("O boxplot das notas indica que alunos contratados e n√£o contratados possuem distribui√ß√µes semelhantes.")
    
    st.write("### 2. A experi√™ncia de trabalho antes do MBA aumenta a chance de contrata√ß√£o?")
    workex_counts = df.groupby(["workex", "status"]).size().unstack()
    fig = workex_counts.plot(kind='bar', stacked=True, figsize=(8,5), colormap='viridis')
    st.pyplot(fig.figure)
    
    st.write("### 3. Qual o impacto da especializa√ß√£o no MBA na empregabilidade?")
    specialisation_counts = df.groupby(["specialisation", "status"]).size().unstack()
    fig = specialisation_counts.plot(kind='bar', stacked=True, figsize=(8,5), colormap='magma')
    st.pyplot(fig.figure)
    
    st.write("### 4. A distribui√ß√£o dos sal√°rios segue um padr√£o espec√≠fico?")
    st.write("A distribui√ß√£o normal dos sal√°rios foi plotada, indicando que os sal√°rios podem seguir um comportamento pr√≥ximo da normalidade.")
    
    # Aplica√ß√£o de distribui√ß√µes probabil√≠sticas
    st.subheader("Distribui√ß√µes Probabil√≠sticas")
    
    st.write("### Distribui√ß√£o Binomial")
    st.write("A distribui√ß√£o Binomial foi escolhida para modelar a probabilidade de um aluno ser contratado, pois trata-se de um evento com duas poss√≠veis sa√≠das: contratado (sucesso) ou n√£o contratado (falha). A seguir, apresentamos a distribui√ß√£o estimada.")
    success_prob = (df["status"] == "Placed").mean()
    binom_values = np.arange(0, 11)
    binom_probs = stats.binom.pmf(binom_values, n=10, p=success_prob)
    plot_distribution(binom_values, binom_probs, "Distribui√ß√£o Binomial (Contrata√ß√£o)", "N√∫mero de Contratados", "Probabilidade")
    
    st.write("### Distribui√ß√£o Normal")
    st.write("A distribui√ß√£o Normal foi aplicada para modelar a distribui√ß√£o dos sal√°rios dos alunos contratados, pois geralmente sal√°rios seguem uma distribui√ß√£o aproximadamente normal. Abaixo, apresentamos a distribui√ß√£o te√≥rica ajustada aos dados reais.")
    salary_mean = df["salary"].mean()
    salary_std = df["salary"].std()
    x = np.linspace(salary_mean - 3*salary_std, salary_mean + 3*salary_std, 100)
    y = stats.norm.pdf(x, salary_mean, salary_std)
    fig = go.Figure(data=[go.Scatter(x=x, y=y, mode='lines', name='Distribui√ß√£o Normal')])
    fig.update_layout(title="Distribui√ß√£o Normal dos Sal√°rios", xaxis_title="Sal√°rio", yaxis_title="Densidade de Probabilidade")
    st.plotly_chart(fig)
